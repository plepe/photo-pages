#!/usr/bin/perl
# autoconvert
# - Creates thumbnails
#
# Copyright (c) 1998-2006 Stephan Plepelits <skunk@xover.mud.at>
#
# This file is part of Skunks' Photosscripts 
# - http://xover.mud.at/~skunk/proj/photo
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
$convert_options="-filter Hamming -quality 85 -interlace PLANE";

#open(CONF, "<conf.php");
#while($r=<CONF>) {
#  if($r =~ /\$resolutions=array\((.*)\)/) {
#    @res=split(",", $1);
#    foreach $r (@res) {
#      $r=~/[ ]*([^ ]*)[ ]*/;
#      print "$1\n";
#      push @resolutions, $1;
#    }
#  }
#  elsif($r =~ /\$orig_path="(.*)"/) {
#    $orig_path=$1;
#  }
#}
@resolutions=(64, 200, 600);
$orig_path="orig";

if(!@resolutions) {
  print "No Resolutions defined in conf.php!\n";
}
if(!$orig_path) {
  print "\$orig_path not defined in conf.php!\n";
}

foreach $r (@resolutions) {
  system("mkdir -p $r");
}

opendir(DIR, "$orig_path/");
@files=grep { /^[^\.]/i } readdir(DIR);
@files=grep { /\.(jpg|gif|png)$/i } @files;
@files=sort @files;
closedir(DIR);

foreach $file (@files) {
  open(F, "identify $orig_path/$file|");
  $f=<F>;

  @f=split(" ", $f);
#  print "$f[1]\n";
  @length=split(/x|\+/, $f[2]); ### <- bei division durch 0 $f[2] durch $f[1] ersetzen

  if($length[0]>$length[1]) {
    $len=$length[0];
  }
  else {
    $len=$length[1];
  }

  print "* $file\t$length[0]x$length[1]\n";
#  system("convert -sample $ratioi% big/$file index/$file");
#  system("convert -sample $ration% big/$file normal/$file");

  foreach $res (@resolutions) {
    if(-f "$res/$file") {
      print "  Skipping $res/$file\n";
    }
    elsif($len>$res) {
     print "  Scaling to $res/$file\n";
     system("convert -resize ${res}x${res} $convert_options $orig_path/$file $res/$file");
  #    system("scaleimg -in big/$file -out normal/$file -size 600");
    }
    else {
      print "Make link for $res/$file\n";
      system("ln -s ../$orig_path/$file $res/$file");
    }
  }
}
